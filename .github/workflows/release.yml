name: Create Release

on:
  push:
    branches:
      - main

env:
  PACKAGE_NAME: vrchat-package-template

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get version from package.json
        id: get-version
        run: |
          VERSION=$(jq -r .version package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if prerelease version
        id: check-prerelease
        run: |
          VERSION=${{ steps.get-version.outputs.version }}
          if [[ $VERSION == *-a.* ]] || [[ $VERSION == *-b.* ]] || [[ $VERSION == *-rc.* ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag exists
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ steps.get-version.outputs.version }}"; then
            echo "Error: Version v${{ steps.get-version.outputs.version }} already exists"
            exit 1
          fi

      - name: Create ZIP archive
        run: |
          zip -r ${{ env.PACKAGE_NAME }}-${{ steps.get-version.outputs.version }}.zip . -x "*.git*"

      - name: Update package.json URL
        run: |
          jq '.url = "https://github.com/Limitex/${{ env.PACKAGE_NAME }}/releases/download/v${{ steps.get-version.outputs.version }}/${{ env.PACKAGE_NAME }}-${{ steps.get-version.outputs.version }}.zip"' package.json > updated-package.json
          mv updated-package.json package.json

      - name: Create Tag
        run: |
          git tag v${{ steps.get-version.outputs.version }}
          git push origin v${{ steps.get-version.outputs.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          name: Release v${{ steps.get-version.outputs.version }}
          generate_release_notes: true
          files: |
            ${{ env.PACKAGE_NAME }}-${{ steps.get-version.outputs.version }}.zip
            package.json
          draft: false
          prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
